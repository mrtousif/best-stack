generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChannelSubscriptions {
  subscriberId String   @map("subscriber_id") @db.Uuid
  channelId    String   @map("channel_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  channels     Users    @relation("subscribed_channels", fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "channel_id_fk")
  subscribers  Users    @relation(fields: [subscriberId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscriber_id_fk")

  @@id([subscriberId, channelId], map: "channel_subscriptions_composite_pk")
  @@map("channel_subscriptions")
}

model Feelings {
  userId    String         @map("user_id") @db.Uuid
  videoId   String         @map("video_id") @db.Uuid
  reaction  reaction_types
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  users     Users          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_fk")
  videos    Videos         @relation(fields: [videoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "videos_id_fk")

  @@id([userId, videoId], map: "feelings_composite_pk")
}

model PlayListNames {
  id         BigInt      @id(map: "play_list_names_id_pk") @default(autoincrement())
  name       String      @db.VarChar
  userId     String      @map("user_id") @db.Uuid
  videoCount BigInt?     @default(0) @map("video_count")
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  users      Users       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_fk")
  playLists  PlayLists[]

  @@map("play_list_names")
}

model PlayLists {
  id              String        @id(map: "play_lists_id_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  playListNamesId BigInt        @map("play_list_names_id")
  videoId         String        @map("video_id") @db.Uuid
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  playListNames   PlayListNames @relation(fields: [playListNamesId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "play_list_names_id_fk")
  videos          Videos        @relation(fields: [videoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "videos_id_fk")

  @@map("play_lists")
}

model SchemaMigrations {
  version String @id @db.VarChar(255)

  @@map("schema_migrations")
}

model Users {
  id                   String                 @id(map: "users_id_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String                 @unique @db.Citext
  phone                String?                @db.VarChar
  name                 String                 @db.VarChar
  channelName          String                 @unique @map("channel_name") @db.VarChar
  description          String?
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime?              @map("updated_at") @db.Timestamptz(6)
  channelSubscriptions ChannelSubscriptions[] @relation("subscribed_channels")
  feelings             Feelings[]
  playListNames        PlayListNames[]
  videos               Videos[]
  watchHistory         watchHistory[]
  ChannelSubscriptions ChannelSubscriptions[]
}

model Videos {
  id          String          @id(map: "videos_id_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String?         @db.VarChar
  description String?
  category    category_types? @default(UNCATEGORISED)
  views       Int?            @default(0)
  thumbnail   String          @unique @db.VarChar
  streamUrl   String          @unique @map("stream_url") @db.VarChar
  channelId   String          @map("channel_id") @db.Uuid
  duration    Float?
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?       @map("updated_at") @db.Timestamptz(6)
  channels    Users           @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "channels_id_fk")
  feelings    Feelings[]
  playLists   PlayLists[]

  @@index([channelId], map: "videos_channel_id_idx")
}

model watchHistory {
  videoId        String    @db.Uuid
  userId         String    @db.Uuid
  lastWatchtedAt DateTime? @db.Time(6)
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  users          Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_fk")

  @@id([videoId, userId], map: "watch_history_cs_pk")
  @@map("watch_history")
}

enum category_types {
  UNCATEGORISED
  GAMING
  EDUCATION
  DOCUMENTARY
  MUSIC
  NEWS
  MOVIES
}

enum reaction_types {
  LIKED
  DISLIKED
}
