generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChannelSubscriptions {
  subscriberId String    @map("subscriber_id") @db.Uuid
  channelId    String    @map("channel_id") @db.Uuid
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  channels     Channels  @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "channel_id_fk")
  users        Users     @relation(fields: [subscriberId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscriber_id_fk")

  @@id([subscriberId, channelId], map: "channel_subscriptions_composite_pk")
  @@map("channel_subscriptions")
}

model Channels {
  id                    String                 @id(map: "channels_id_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                  String                 @unique @db.VarChar
  description           String?
  userId                String?                @map("user_id") @db.Uuid
  createdAt             DateTime?              @default(now()) @map("created_at") @db.Timestamptz(6)
  users                 Users?                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_fk")
  channelSubscriptions  ChannelSubscriptions[]
  videos                Videos[]
}

model Feelings {
  userId    String          @map("user_id") @db.Uuid
  videoId   String          @map("video_id") @db.Uuid
  reaction  reaction_types?
  createdAt DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  users     Users           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_fk")
  videos    Videos          @relation(fields: [videoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "videos_id_fk")

  @@id([userId, videoId], map: "feelings_composite_pk")
}

model PlayListNames {
  id         BigInt      @id(map: "play_list_names_id_pk") @default(autoincrement())
  name       String      @db.VarChar
  userId     String      @map("user_id") @db.Uuid
  videoCount BigInt?     @default(0) @map("video_count")
  createdAt  DateTime?   @default(now()) @map("created_at") @db.Timestamptz(6)
  users      Users       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_fk")
  playLists  PlayLists[]

  @@map("play_list_names")
}

model PlayLists {
  id              String          @id(map: "play_lists_id_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  playListNamesId BigInt          @map("play_list_names_id")
  videoId         String          @map("video_id") @db.Uuid
  createdAt       DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  playListNames   PlayListNames   @relation(fields: [playListNamesId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "play_list_names_id_fk")
  videos          Videos          @relation(fields: [videoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "videos_id_fk")

  @@map("play_lists")
}

model SchemaMigrations {
  version String @id @db.VarChar(255)

  @@map("schema_migrations")
}

model Users {
  id                    String                 @id(map: "users_id_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                 String                 @unique @db.Citext
  phone                 String?                @db.VarChar
  name                  String                 @db.VarChar
  channelName           String?                @map("channel_name") @db.VarChar
  createdAt             DateTime?              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime?              @map("updated_at") @db.Timestamptz(6)
  channelSubscriptions  ChannelSubscriptions[]
  channels              Channels[]
  feelings              Feelings[]
  playListNames         PlayListNames[]
  videos                Videos[]
}

model Videos {
  id          String          @id(map: "videos_id_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String?         @db.VarChar
  description String?
  category    category_types? @default(UNCATEGORISED)
  views       Int?            @default(0)
  thumbnail   String          @unique @db.VarChar
  streamUrl   String          @unique @map("stream_url") @db.VarChar
  userId      String          @map("user_id") @db.Uuid
  channelId   String          @map("channel_id") @db.Uuid
  createdAt   DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?       @map("updated_at") @db.Timestamptz(6)
  channels    Channels        @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "channels_id_fk")
  users       Users           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_id_fk")
  feelings    Feelings[]
  play_lists  PlayLists[]

  @@index([userId])
}

enum category_types {
  UNCATEGORISED
  GAMING
  EDUCATION
  DOCUMENTARY
  MUSIC
  NEWS
  MOVIES
}

enum reaction_types {
  LIKED
  DISLIKED
}
